/*
* DO NOT MODIFY THIS COMMENT
* Generated by devmate
* Test model: a8d26c27-a654-4d6d-857e-3e53b2919d0b
*/

namespace AvgSpeedTests
{
	using System;
	using System.Collections.Generic;
	using System.Reflection;
	using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Moq;

    [TestClass]
	public class AverageSpeedTestCase
	{
		private static AvgSpeed.ISpeedSensor SensorStub()
		{
			return new Mock<AvgSpeed.ISpeedSensor>().Object;
		}


		private static AvgSpeed.Preferences Preferences(UnitsNet.Units.SpeedUnit preferredSpdUnit)
		{
			return new AvgSpeed.Preferences
			{
				PreferredLengthUnit = UnitsNet.Units.LengthUnit.KilolightYear,
				PreferredSpeedUnit = UnitsNet.Units.SpeedUnit.KilometerPerHour
			};
		}

		private static AvgSpeed.ITrack TrackStub(Int32 value, UnitsNet.Units.LengthUnit unit)
		{
			var trackMock = new Mock<AvgSpeed.ITrack>();
			trackMock.Setup(track => track.Distance).Returns(new UnitsNet.Length(value, unit));
			return trackMock.Object;
		}

		[AttributeUsage(AttributeTargets.Method)]
		private class PositiveTestsAttribute : Attribute, ITestDataSource
		{
			public IEnumerable<object[]> GetData(MethodInfo methodInfo)
			{
				yield return new object[]
				{
					new ExpectedValueTestData
					{
						Name = "p1",
						Params = new Parameters{
							Instance = new AvgSpeed.Speedometer(SensorStub(), Preferences(UnitsNet.Units.SpeedUnit.KilometerPerHour)),
							Duration = new UnitsNet.Duration(2, UnitsNet.Units.DurationUnit.Hour),
							Track = TrackStub(60, UnitsNet.Units.LengthUnit.Kilometer)
						},
						ExpectedValue = new UnitsNet.Speed(30, UnitsNet.Units.SpeedUnit.KilometerPerHour)
					}
				};
			}

			public string GetDisplayName(MethodInfo methodInfo, object[] data)
			{
				return (data[0] as ExpectedValueTestData)?.Name;
			}
		}

		[AttributeUsage(AttributeTargets.Method)]
		private class TestsThrowingExceptionAttribute : Attribute, ITestDataSource
		{
			public IEnumerable<object[]> GetData(MethodInfo methodInfo)
			{
				yield return new object[]
				{
					new TestThrowingExceptionData
					{
						Name = "n1 - duration: zero",
						Params = new Parameters{
							Instance = new AvgSpeed.Speedometer(SensorStub(), Preferences(UnitsNet.Units.SpeedUnit.KilometerPerHour)),
							Duration = new UnitsNet.Duration(),
							Track = TrackStub(60, UnitsNet.Units.LengthUnit.Kilometer)
						},
						ExpectedException = typeof(ArgumentException)
					}
				};
				yield return new object[]
				{
					new TestThrowingExceptionData
					{
						Name = "n2 - duration: negative",
						Params = new Parameters{
							Instance = new AvgSpeed.Speedometer(SensorStub(), Preferences(UnitsNet.Units.SpeedUnit.KilometerPerHour)),
							Duration = new UnitsNet.Duration(-1, UnitsNet.Units.DurationUnit.Minute),
							Track = TrackStub(60, UnitsNet.Units.LengthUnit.Kilometer)
						},
						ExpectedException = typeof(ArgumentException)
					}
				};
				yield return new object[]
				{
					new TestThrowingExceptionData
					{
						Name = "n3 - track: zero",
						Params = new Parameters{
							Instance = new AvgSpeed.Speedometer(SensorStub(), Preferences(UnitsNet.Units.SpeedUnit.KilometerPerHour)),
							Duration = new UnitsNet.Duration(2, UnitsNet.Units.DurationUnit.Hour),
							Track = TrackStub(0, UnitsNet.Units.LengthUnit.Centimeter)
						},
						ExpectedException = typeof(ArgumentException)
					}
				};
				yield return new object[]
				{
					new TestThrowingExceptionData
					{
						Name = "n4 - track: negative",
						Params = new Parameters{
							Instance = new AvgSpeed.Speedometer(SensorStub(), Preferences(UnitsNet.Units.SpeedUnit.KilometerPerHour)),
							Duration = new UnitsNet.Duration(2, UnitsNet.Units.DurationUnit.Hour),
							Track = TrackStub(-10, UnitsNet.Units.LengthUnit.Foot)
						},
						ExpectedException = typeof(ArgumentException)
					}
				};
				yield return new object[]
				{
					new TestThrowingExceptionData
					{
						Name = "n5 - track: nullPointer",
						Params = new Parameters{
							Instance = new AvgSpeed.Speedometer(SensorStub(), Preferences(UnitsNet.Units.SpeedUnit.KilometerPerHour)),
							Duration = new UnitsNet.Duration(2, UnitsNet.Units.DurationUnit.Hour),
							Track = null
						},
						ExpectedException = typeof(ArgumentNullException)
					}
				};
			}

			public string GetDisplayName(MethodInfo methodInfo, object[] data)
			{
				return (data[0] as TestThrowingExceptionData)?.Name;
			}
		}

		[DataTestMethod]
		[PositiveTests]
		public void AverageSpeedTest(ExpectedValueTestData data)
		{
			var actual = data.Params.Instance.AverageSpeed(data.Params.Duration, data.Params.Track);
			Assert.AreEqual(data.ExpectedValue.KilometersPerHour, actual.KilometersPerHour,1e-8);
		}

		[DataTestMethod]
		[TestsThrowingException]
		public void AverageSpeedTestThrowingException(TestThrowingExceptionData data)
		{
			try
			{
				data.Params.Instance.AverageSpeed(data.Params.Duration, data.Params.Track);
				Assert.Fail();
			}
			catch (Exception e)
			{
				Assert.AreEqual(e.GetType(), data.ExpectedException);
			}
		}

		public class ExpectedValueTestData
		{
			public string Name;
			public Parameters Params;
			public UnitsNet.Speed ExpectedValue;
		}

		public class TestThrowingExceptionData
		{
			public string Name;
			public Parameters Params;
			public Type ExpectedException;
		}

		public class Parameters {
			public AvgSpeed.Speedometer Instance;
			public UnitsNet.Duration Duration;
			public AvgSpeed.ITrack Track;
		}
	}
}

/*
WARNING: Modification of this comment will make it impossible to merge user-defined changes

BEGIN_CODEGEN_DATA
H4sIAAAAAAAAAOVYbW/bNhD+LAP+D0Q/yYWtxHaStsm6wXCcVVj9gtktMBj5QEtnh5ssaiTl1ivy33uk3iy/dViTYmm
BxCJ1vOPDe56jRJ08r1aek+shGQwnpD+8dm/+IJM37ph0h/1+bzDR1l8hBEEV+GS2Jj6sltjW9ycgFVlyH4JLQl/6rQ
uv9aJBL87PGmf+hd94ef4CGm04b89ar5qv/NMZ+pxUK9VKSJcgI+oB6awW4wjA15FktfKpWrFiycIFGa+lguXVVt/p8
iAATzEeSsegYt7OmN9hno4pTH3mCS75XDnvmYxpMFaxz7ijp51wHkjnXciU7uHgKw3RmupeN6BS3mIvimcB84in+wga
s7GAHHiXSkyHpcFbkWArzA6Riip0yNbnuOYyhlByQZILYpjZNe1kPK2TEzIZIhFsGQWwhFCROfUUF2tjVXeCfyAhfCA
DrtxsCPi9jx5EerF2TS/XujfoD+IYCZiDgNADSTbatl6/HIAyiZCOGaybJDKDBGKPzI1vDdidCOr9RcyvyZgbqnaLrG
gQQ51swX4L4ULdGdzxI2KddpQSbBYreCdRCHbenVCxAMTRB3XH/drt5sIS7Yy4ZIqtwAg+9yOXJG/XiauN11TRMY+FB
8UiUhW6vTBeogRnAfzEZ3+i1qe3P2ORGh87mdsN55ws86bJRBrFWjMIfCJAxSI0i86CJOZ0lKUtvY8RWsB/r9OdwUrt
2ThrgOVMXpNnUfNZPbs3ooIuJd7VUUwHFAiZ+1huiEyj9NIhOd/ml5vR9mad1P+VXJ3fWJA4j0C8wfTVajkk6zrGTQz
JTKfMY2T37daOoDKTiW3iFeESYb7ekObF6RFFFtBqWYj7PFgpz9v4zOrs9m7wI8tOA98n13uj3ky+mY4kKg73Ri0cJq
OArjWR+/VTzzVCfFRASU6pkGxtmJ7eEir3y6b2i6MnyKE8RDmZMpro6sWV5NX6/68r8+DZhn2stsImaRA/VeMl+QcEf
+LF9siVlGcV46p1BHxud8Qi1vt6btpfJY/LY6vEYwgLqh8HT5zLRvP4ztlnIVbgD8p4GxlXep3fRdl+7TPyKM1d5Io9
VZ7PCp6/k7L+Wq4bzaNs33CuniDP5xs8x0Ew4gyPCuKHpFqv/z8ROEDHL5D4zV5WDyrg8Aurtmq3ZHqjqmnpZJe8qib
IV5z5O98M7L2vyAXeBO6KCoLH1JgGmEJtcxJxOZmEnM249uaIjL56yc8Ql5xlrY6UIJTTEdD7G2dIvEuw6unk5cPvvs
Xvfw//YhZ2POyDZGynRqVH95TXh05Olp0byoL08J/q06PKuyN2IW4oCWw7q+CgZCeofl3HpRQX+t9VWOl708FD+Kc9B
VIoNr1f7EBJU5as5UNmeaqrQ4CO7pkPAEqni+yk6SCcjWClyfdtrCQTx/4s5Ptk1rjaG3Dzo1QGS//j32d3zXfUUBUA
AA==
END_CODEGEN_DATA
*/
