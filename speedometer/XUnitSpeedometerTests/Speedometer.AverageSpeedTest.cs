/*
* DO NOT MODIFY THIS COMMENT
* Generated by devmate
* Test model: a8d26c27-a654-4d6d-857e-3e53b2919d0b
*/

namespace AvgSpeedTests
{
	using System;
	using System.Collections.Generic;
	using Xunit;
	using Moq;

	public class AverageSpeedTestCase
	{
		private static AvgSpeed.ISpeedSensor SensorStub()
		{
			return new Mock<AvgSpeed.ISpeedSensor>().Object;
		}

		private static AvgSpeed.Preferences Preferences(UnitsNet.Units.SpeedUnit preferredSpdUnit)
		{
			return new AvgSpeed.Preferences
			{
				PreferredLengthUnit = UnitsNet.Units.LengthUnit.KilolightYear,
				PreferredSpeedUnit = UnitsNet.Units.SpeedUnit.KilometerPerHour
			};
		}

		private static AvgSpeed.ITrack TrackStub(Int32 value, UnitsNet.Units.LengthUnit unit)
		{
			var trackMock = new Mock<AvgSpeed.ITrack>();
			trackMock.Setup(track => track.Distance).Returns(new UnitsNet.Length(value, unit));
			return trackMock.Object;
		}

		private class PositiveTests : TheoryData<ExpectedValueTestData>
		{
			public PositiveTests() {
				Add(new ExpectedValueTestData{
					Name = @"p1",
					Params = new Parameters{
						Instance = new AvgSpeed.Speedometer(SensorStub(), Preferences(UnitsNet.Units.SpeedUnit.KilometerPerHour)),
						Duration = new UnitsNet.Duration(2, UnitsNet.Units.DurationUnit.Hour),
						Track = TrackStub(60, UnitsNet.Units.LengthUnit.Kilometer)
					},
					ExpectedValue = new UnitsNet.Speed(30, UnitsNet.Units.SpeedUnit.KilometerPerHour)
				});
			}
		}

		private class TestsThrowingException : TheoryData<TestThrowingExceptionData>
		{
			public TestsThrowingException() {
				Add(new TestThrowingExceptionData{
					Name = @"n1 - duration: zero",
					Params = new Parameters{
						Instance = new AvgSpeed.Speedometer(SensorStub(), Preferences(UnitsNet.Units.SpeedUnit.KilometerPerHour)),
						Duration = new UnitsNet.Duration(),
						Track = TrackStub(60, UnitsNet.Units.LengthUnit.Kilometer)
					},
					ExpectedException = typeof(ArgumentException)
				});
				Add(new TestThrowingExceptionData{
					Name = @"n2 - duration: negative",
					Params = new Parameters{
						Instance = new AvgSpeed.Speedometer(SensorStub(), Preferences(UnitsNet.Units.SpeedUnit.KilometerPerHour)),
						Duration = new UnitsNet.Duration(-1, UnitsNet.Units.DurationUnit.Minute),
						Track = TrackStub(60, UnitsNet.Units.LengthUnit.Kilometer)
					},
					ExpectedException = typeof(ArgumentException)
				});
				Add(new TestThrowingExceptionData{
					Name = @"n3 - track: zero",
					Params = new Parameters{
						Instance = new AvgSpeed.Speedometer(SensorStub(), Preferences(UnitsNet.Units.SpeedUnit.KilometerPerHour)),
						Duration = new UnitsNet.Duration(2, UnitsNet.Units.DurationUnit.Hour),
						Track = TrackStub(0, UnitsNet.Units.LengthUnit.Centimeter)
					},
					ExpectedException = typeof(ArgumentException)
				});
				Add(new TestThrowingExceptionData{
					Name = @"n4 - track: negative",
					Params = new Parameters{
						Instance = new AvgSpeed.Speedometer(SensorStub(), Preferences(UnitsNet.Units.SpeedUnit.KilometerPerHour)),
						Duration = new UnitsNet.Duration(2, UnitsNet.Units.DurationUnit.Hour),
						Track = TrackStub(-10, UnitsNet.Units.LengthUnit.Foot)
					},
					ExpectedException = typeof(ArgumentException)
				});
				Add(new TestThrowingExceptionData{
					Name = @"n5 - track: nullPointer",
					Params = new Parameters{
						Instance = new AvgSpeed.Speedometer(SensorStub(), Preferences(UnitsNet.Units.SpeedUnit.KilometerPerHour)),
						Duration = new UnitsNet.Duration(2, UnitsNet.Units.DurationUnit.Hour),
						Track = null
					},
					ExpectedException = typeof(ArgumentNullException)
				});
			}
		}

		[Theory]
		[ClassData(typeof(PositiveTests))]
		public void AverageSpeedTest(ExpectedValueTestData data)
		{
			var actual = data.Params.Instance.AverageSpeed(data.Params.Duration, data.Params.Track);
			Assert.Equal(data.ExpectedValue.KilometersPerHour, actual.KilometersPerHour,8);
		}

		[Theory]
		[ClassData(typeof(TestsThrowingException))]
		public void AverageSpeedTestThrowingException(TestThrowingExceptionData data)
		{
			Assert.Throws(data.ExpectedException, () => data.Params.Instance.AverageSpeed(data.Params.Duration, data.Params.Track));
		}

		public class ExpectedValueTestData
		{
			public string Name;
			public Parameters Params;
			public UnitsNet.Speed ExpectedValue;

			public override string ToString()
			{
				return $"{Name}";
			}
		}

		public class TestThrowingExceptionData
		{
			public string Name;
			public Parameters Params;
			public Type ExpectedException;

			public override string ToString()
			{
				return $"{Name}";
			}
		}

		public class Parameters {
			public AvgSpeed.Speedometer Instance;
			public UnitsNet.Duration Duration;
			public AvgSpeed.ITrack Track;
		}
	}
}

/*
WARNING: Modification of this comment will make it impossible to merge user-defined changes

BEGIN_CODEGEN_DATA
H4sIAAAAAAAAAOVXbW/TMBD+nEr9D6eJDylqM9rujY0hpm5jFayt1IBAiA9ucusi0jjYTreB9t+xnZcmTVohGIMNaWt
d++783D2PrfPm03rtKRwPYTC04Xx43D/9CPZZfwy94fn5ycBWq68xQEYEujC5ARfnMzlW8zZyATPqor8PZM/t7Did3R
bZ2d5qbbk7bmtvexdbXdzuTjrP28/dZxPps1mv1WsBmSEPiYNwNJ+OQ0RXReL12vd6zYi4F0xhfMMFzg6Wfls96vvoC
I8G3NKoPGdh8yEKPHGgNjDCaOJ7Djg+4VxuItFPMduoR7iEb6jNjJB5c5kNcEGEdEjxWH39NcaAUwbx11hEE7OhnLSn
sbkJ9lAWzpuFPs4wEHBBHEHZjV4Vl4xeQYBXMKCin5qge3LtYKgSMBsKuXGr8a7EMWJ4gQwDBznkxuY7mSofoLD0wNL
GagihNmISe6gn7htw32bE+QL6U1esH4huB+bEj7AJS7DfYjAVlxp3dA9YYzmMKPeEN0etOdgH+xJl3GMiyIuT61CqC9
33Cq1aV7MvF6gSWRUimA2IF40j1zUVpsooiY0xkNqHQ3i1EbY3msnciDAy43JWeesfKJDx1MXoB7LKkvbEIqu1/qTa2
MxrtPlTUrHeeH7sPEJ2RiPWaKSAjONInndZx2THLEQ6b3ZKXKZLOrQOl0WLJXGYE8XOszVaWABrJBFu01CF0i6D05mZ
3XLoNSnHcW9juSi9rBCNptpWspM3TSazonqUTcmkWkHV4cpSWhmyJKegDS1wEw724Rsy+pD19SfFs6DvEMRNiPTCPGL
TSF0h2dKSMH6FkE6BkACnRN0ZD5mUVnv9qT/3gkjgI6CuK6kTCvTDP0i/eVGv5asny+79E4RtLQh7DAftN0lrtdfSdk
qp+NuEbecIi3x/RD3Zv7H/jjOV+y8wMZBuq9jI9zCf4u7ksx73VCOj2DCTaIU2ttHQVkl/MqeeW3o3mZWNLbjyI9e5z
wkD2apHxJe41ZoVk2mlnFn5uGbeIi1Ys+Cna5Ukd8Q5MmGdfJXhY9cCpmayc6H7X1+E6k7sJ6pR7t5Wyn+5REkW2pYX
08j8miC7wcOXd1jB4pMo/0Cu5LXUs3LB1CtbneGDwmsoO57xkBdWi915cav4rZ6ZUpkV81xMd7LpWA/iR3cCxmAoIhb
Ak43vCsntRkXnns9tJSl3lJ8tZQQl9u4jsxyuQh5VlyGk0qnmJrvc0sFBZcD82z4Vk/qXfz8Aljg5QEcSAAA=
END_CODEGEN_DATA
*/
