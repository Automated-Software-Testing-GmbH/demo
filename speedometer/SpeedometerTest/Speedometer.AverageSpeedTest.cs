/*
* DO NOT MODIFY THIS COMMENT
* Generated by devmate
* Test model: a8d26c27-a654-4d6d-857e-3e53b2919d0b
*/

namespace AvgSpeedTests
{
	using System;
	using System.Collections.Generic;
    using Moq;
	using NUnit.Framework;

	public class AverageSpeedTestCase
	{
		private static AvgSpeed.ISpeedSensor SensorStub()
		{
			return new Mock<AvgSpeed.ISpeedSensor>().Object;
		}

		private static AvgSpeed.Preferences Preferences(UnitsNet.Units.SpeedUnit preferredSpdUnit)
		{
			return new AvgSpeed.Preferences
			{
				PreferredLengthUnit = UnitsNet.Units.LengthUnit.KilolightYear,
				PreferredSpeedUnit = UnitsNet.Units.SpeedUnit.KilometerPerHour
			};
		}

		private static AvgSpeed.ITrack TrackStub(Int32 value, UnitsNet.Units.LengthUnit unit)
		{
			var trackMock = new Mock<AvgSpeed.ITrack>();
			trackMock.Setup(track => track.Distance).Returns(new UnitsNet.Length(value, unit));
			return trackMock.Object;
		}

		private static IEnumerable<TestCaseData> PositiveTests()
		{
			yield return new TestCaseData(new AvgSpeed.Speedometer(SensorStub(), Preferences(UnitsNet.Units.SpeedUnit.KilometerPerHour)), new UnitsNet.Duration(2, UnitsNet.Units.DurationUnit.Hour), TrackStub(60, UnitsNet.Units.LengthUnit.Kilometer), new UnitsNet.Speed(30, UnitsNet.Units.SpeedUnit.KilometerPerHour))
				.SetName("p1")
				.SetDescription("");
		}

		private static IEnumerable<TestCaseData> TestsThrowingException()
		{
			yield return new TestCaseData(new AvgSpeed.Speedometer(SensorStub(), Preferences(UnitsNet.Units.SpeedUnit.KilometerPerHour)), new UnitsNet.Duration(), TrackStub(60, UnitsNet.Units.LengthUnit.Kilometer), typeof(ArgumentException))
				.SetName("n1")
				.SetDescription("duration: zero");
			yield return new TestCaseData(new AvgSpeed.Speedometer(SensorStub(), Preferences(UnitsNet.Units.SpeedUnit.KilometerPerHour)), new UnitsNet.Duration(-1, UnitsNet.Units.DurationUnit.Minute), TrackStub(60, UnitsNet.Units.LengthUnit.Kilometer), typeof(ArgumentException))
				.SetName("n2")
				.SetDescription("duration: negative");
			yield return new TestCaseData(new AvgSpeed.Speedometer(SensorStub(), Preferences(UnitsNet.Units.SpeedUnit.KilometerPerHour)), new UnitsNet.Duration(2, UnitsNet.Units.DurationUnit.Hour), TrackStub(0, UnitsNet.Units.LengthUnit.Centimeter), typeof(ArgumentException))
				.SetName("n3")
				.SetDescription("track: zero");
			yield return new TestCaseData(new AvgSpeed.Speedometer(SensorStub(), Preferences(UnitsNet.Units.SpeedUnit.KilometerPerHour)), new UnitsNet.Duration(2, UnitsNet.Units.DurationUnit.Hour), TrackStub(-10, UnitsNet.Units.LengthUnit.Foot), typeof(ArgumentException))
				.SetName("n4")
				.SetDescription("track: negative");
			yield return new TestCaseData(new AvgSpeed.Speedometer(SensorStub(), Preferences(UnitsNet.Units.SpeedUnit.KilometerPerHour)), new UnitsNet.Duration(2, UnitsNet.Units.DurationUnit.Hour), null, typeof(ArgumentNullException))
				.SetName("n5")
				.SetDescription("track: nullPointer");
		}

		[Test]
		[TestCaseSource("PositiveTests")]
		public void AverageSpeedTest(AvgSpeed.Speedometer instance, UnitsNet.Duration duration, AvgSpeed.ITrack track, UnitsNet.Speed expected)
		{
			UnitsNet.Speed actual = instance.AverageSpeed(duration, track);
			Assert.AreEqual(expected.KilometersPerHour, actual.KilometersPerHour, 1e-8);
		}

		[Test]
		[TestCaseSource("TestsThrowingException")]
		public void AverageSpeedTestThrowingException(AvgSpeed.Speedometer instance, UnitsNet.Duration duration, AvgSpeed.ITrack track, Type expected)
		{
			Assert.Throws(expected, () => instance.AverageSpeed(duration, track));
		}
	}
}

/*
WARNING: Modification of this comment will make it impossible to merge user-defined changes

BEGIN_CODEGEN_DATA
H4sIAAAAAAAAAN2WW2/aMBTHn0HiOxzxFCoIBQq9rZUQ0DXauEhkD9O0h5CcUquJndkOLZv23We7QFPSUlrtgiaRxDg
+Pv/zOye2q3uF/B50hzAYutAfdp2Lz+BeOmPoDPv93sDVb98jRe5JDGAyhwBnkWrrfheFhIgFGJ6AdxTUW379sOK1mg
eVg6AVVI6ah1hpYLMxqR/XjoP9ibKpFvKFPPUiFLHnI7Rn03GMGOiZRCH/o5DPJYLQKYznQmJ0uvbf7rAwRF8SRoVtV
BH/YczgEyXSvuBq9lvGb061q1ycTELigx96Qih3Ko4prlx2PKECyWm3uZiTmYoLhPSkMlgqsx3zGCMVjMP9YyyTiVXS
RsYyV62CO1QISRSHGCGVcOX5kvG5eSuvObsFirfLIAZMOsuRGPTufIx1RFZJh5L7aWQ/K2fE8Qo5Uh8FpNqWjl0MUNq
mYZvBugmxGcRVCLHp+Ee6HZd7/g2Yu+HnUNmow8wLEyzDmvqPSKfy2shP/rpkp0eTSNXJJMR3yyLpetI7hxETRJIZmm
pNF8CcYBgAR5lwatyn7SzdseJg7ixCidxKV1N5q2zaH0h4bzxCfskSXlKGev6VQTdRX6oOsZ6hunxlJjLG5VQ+Wvsb0
vDgd92fkWY1ssabNBtoOXuMcqA+VqsY14qpvi4Kn5P7RBWLb0uVSZGry0GtDKm873bO3pgQOY+RXVltPk10oa/CzYKm
z4MOFiJO4DtytsC+k5Qqtc2l3Sc0kfjnWda3YElx6uklY5d5vnal2Miyo6CRN8BsPAtTase7X5WvpVipbeR4wZh8HcG
Dlwj+P7VIkzDMsBmozk18mi/yUROMGFEnBf541/miwXxdtTSisRLiq1kfHQmKJTNoceScMRJkTpzWU0iBULWhKYTlLB
FYriXlzFnKyC6vbcWAd7E6IWOQ2urWRqgDU+KFcLZya6dVWg8OjYNFsbSFQC7tNsfeN2VtLd2UF9NtC+zpjXkLctnN/
PejdFVFPQVwEbyRIFKhWyU4O98S4wqQvtTvF2TtQcB5DQAA
END_CODEGEN_DATA
*/
