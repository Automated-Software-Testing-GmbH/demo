/*
* DO NOT MODIFY THIS COMMENT
* Generated by TCG
* TestItem: a8d26c27-a654-4d6d-857e-3e53b2919d0b
*/

using System.Collections.Generic;
using NUnit.Framework;
using System;
using Moq;

public class AverageSpeedTestCase
{
	private static AvgSpeed.ISpeedSensor CreateSensorStub()
	{
		return new Mock<AvgSpeed.ISpeedSensor>().Object;
	}
	
	private static AvgSpeed.Preferences CreatePreferences(UnitsNet.Units.SpeedUnit preferredSpdUnit)
	{
		return new AvgSpeed.Preferences
		{
			PreferredLengthUnit = UnitsNet.Units.LengthUnit.KilolightYear,
			PreferredSpeedUnit = UnitsNet.Units.SpeedUnit.KilometerPerHour
		};
	}
	
	private static AvgSpeed.ITrack CreateTrackStub(System.Int32 value, UnitsNet.Units.LengthUnit unit)
	{
		var trackMock = new Mock<AvgSpeed.ITrack>();
		trackMock.Setup(track => track.Distance).Returns(new UnitsNet.Length(value, unit));
		return trackMock.Object;
	}

	private static IEnumerable<TestCaseData> PositiveTests()
	{
		yield return new TestCaseData(new AvgSpeed.Speedometer(CreateSensorStub(), CreatePreferences(UnitsNet.Units.SpeedUnit.KilometerPerHour)), new UnitsNet.Duration(2, UnitsNet.Units.DurationUnit.Hour), CreateTrackStub(60, UnitsNet.Units.LengthUnit.Kilometer), new UnitsNet.Speed(30, UnitsNet.Units.SpeedUnit.KilometerPerHour)).SetName("p1").SetDescription("");
	}
	
	private static IEnumerable<TestCaseData> TestsThrowingException()
	{
		yield return new TestCaseData(new AvgSpeed.Speedometer(CreateSensorStub(), CreatePreferences(UnitsNet.Units.SpeedUnit.KilometerPerHour)), new UnitsNet.Duration(), CreateTrackStub(60, UnitsNet.Units.LengthUnit.Kilometer), typeof(ArgumentException)).SetName("n1").SetDescription("duration: zero");
		yield return new TestCaseData(new AvgSpeed.Speedometer(CreateSensorStub(), CreatePreferences(UnitsNet.Units.SpeedUnit.KilometerPerHour)), new UnitsNet.Duration(-1, UnitsNet.Units.DurationUnit.Minute), CreateTrackStub(60, UnitsNet.Units.LengthUnit.Kilometer), typeof(ArgumentException)).SetName("n2").SetDescription("duration: negative");
		yield return new TestCaseData(new AvgSpeed.Speedometer(CreateSensorStub(), CreatePreferences(UnitsNet.Units.SpeedUnit.KilometerPerHour)), new UnitsNet.Duration(2, UnitsNet.Units.DurationUnit.Hour), CreateTrackStub(0, UnitsNet.Units.LengthUnit.Centimeter), typeof(ArgumentException)).SetName("n3").SetDescription("track: zero");
		yield return new TestCaseData(new AvgSpeed.Speedometer(CreateSensorStub(), CreatePreferences(UnitsNet.Units.SpeedUnit.KilometerPerHour)), new UnitsNet.Duration(2, UnitsNet.Units.DurationUnit.Hour), CreateTrackStub(-10, UnitsNet.Units.LengthUnit.Foot), typeof(ArgumentException)).SetName("n4").SetDescription("track: negative");
		yield return new TestCaseData(new AvgSpeed.Speedometer(CreateSensorStub(), CreatePreferences(UnitsNet.Units.SpeedUnit.KilometerPerHour)), new UnitsNet.Duration(2, UnitsNet.Units.DurationUnit.Hour), null, typeof(ArgumentNullException)).SetName("n5").SetDescription("track: nullPointer");
	}
	

	[Test]
	[TestCaseSource("PositiveTests")]
	public void AverageSpeedTest(AvgSpeed.Speedometer instance, UnitsNet.Duration duration, AvgSpeed.ITrack track, UnitsNet.Speed expected)
	{
		UnitsNet.Speed actual = instance.AverageSpeed(duration, track);
		Assert.AreEqual(expected.KilometersPerHour, actual.KilometersPerHour, 1e-8);
	}
	
	[Test]
	[TestCaseSource("TestsThrowingException")]
	public void AverageSpeedTestThrowingException(AvgSpeed.Speedometer instance, UnitsNet.Duration duration, AvgSpeed.ITrack track, Type expected)
	{
		Assert.Throws(expected, () => instance.AverageSpeed(duration, track));
	}
}

/*
WARNING: Modification of this comment will make it impossible to merge user-defined changes

BEGIN_CODEGEN_DATA
H4sIAAAAAAAAAN2WW2/aMBTHn4vEd7B4ChWEAoXe1koIaIs2LhLZwzTtISSn1GqwM9uhZdO++44NoSmh
Wdut2jqJi2P7+PzP75zYruzmc7ukMySDoUP6w07v/BNxLntj0h72+92Bo0cvgIFwFfhksiBO+0L3OSBV
T8HsmLiHfq3p1Q7KbrOxX973m375sHEA5To06pPaUfXI35ugRSWfy+ciSdmUjBcSLe02DwLwFOVM2sYF
9U7iKYOPjCr7XLgzuOXi5uSh6YleK4wmAfWIF7hSktYcFU5hHAL4WlrblZDPfc/ndkJB56idSOUqnN6a
T80ku2f+xsAkF6QtAOcsH8YqmlhFtNTWO5UKcYaIh87CAGbAFLlyPcXFQg+qa8FvCYPbOKQBV714Ivjd
Ow9CHZ9VRMU7P/CbIWgk4AoEMA/kSk+ix9I85ACUbRq2MdFNEppJAkMJTcdfUN5zhOvdrESbtmG4WrnH
VL1G5m4QQYlshPEB2FRdmzii19Oelt7rsmiGFTMJ4F1cLh1XuWdkxCVVdA66V96XwYJC4BMBKhLMuE5a
WbpjTcP88hkoEFa6rkrPyK39ngbLhUYgLnkkimiufa0NOhG+lzrUWgptPGQWMsalVIaaexkZufe+6dUI
tOpp4yzl9hjUAF9nqxBWC+apA9ITdJmqQiGj0B7PlsmSo+sBN4dE4t9K2n4rJ2oRAr+yWmIa6cpfh59k
zbax9lfuj8k3EHxJ/p9HVa5ml3ifskjB6wOtZQJlMHX19vFGoL5s28gE2kZy9FlE61uIKu3sTdXny1CW
q5kwzzlXT8W4/zjG/7IqWRQEKTQD7NyOp5GBB41GnOLlQSSPIfz5rMl8iRsa0Ride7jeg3tCoajnrC6k
c0791H3U2kaUUIYnHFIrpSGQeE8ppe5ZRnVp4zgmcBfiZRr89dm3MY73p8gNyOnaqZ3UaN27M8svC6Ul
JQhltwR0v6KxFfsorVZLntmPo9p+SP+aWfpc//MQHSyfNLpV3EaATERtFcnp2RMBxmzw8xMUKl7eZA0A
AA==
END_CODEGEN_DATA
*/