/*
* DO NOT MODIFY THIS COMMENT
* Generated by devmate
* Test model: d7f4223f-fc6d-4a3b-9e1c-59c5de26af9a
*/

namespace MeetingCalculatorTests
{
	using System;
	using System.Collections.Generic;
	using System.Reflection;
	using Microsoft.VisualStudio.TestTools.UnitTesting;

	[TestClass]
	public class CheckAppointmentTestCase
	{
		private static MeetingCalculator.AppointmentChecker MyCalendarFactroy()
		{
			return new MeetingCalculator.AppointmentChecker(
				new List<MeetingCalculator.MeetingAppointment>
				{
					new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 30, 8, 0, 0), new DateTime(2020, 9,  30, 9, 0, 0)),
					new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 30, 9, 0, 0), new DateTime(2020, 9,  30, 10, 0, 0)),
					new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 30, 10, 0, 0), new DateTime(2020, 9, 30, 11, 0, 0)),
					new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 30, 11, 0, 0), new DateTime(2020, 9, 30, 12, 0, 0)),
					new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 30, 13, 0, 0), new DateTime(2020, 9, 30, 14, 0, 0)),
					new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 30, 14, 0, 0), new DateTime(2020, 9, 30, 15, 0, 0))
					});
		}

		[AttributeUsage(AttributeTargets.Method)]
		private class PositiveTestsAttribute : Attribute, ITestDataSource
		{
			public IEnumerable<object[]> GetData(MethodInfo methodInfo)
			{
				yield return new object[]
				{
					new ExpectedValueTestData
					{
						Name = "p1 - //LinkToJira //link to AzureDevopsRequirements",
						Params = new Parameters{
							Instance = new MeetingCalculator.AppointmentChecker(new List<MeetingCalculator.MeetingAppointment> {new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 8, 0, 0), new DateTime(2020, 9, 18, 9, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 9, 0, 0), new DateTime(2020, 9, 18, 10, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 10, 0, 0), new DateTime(2020, 9, 18, 11, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 11, 0, 0, DateTimeKind.Unspecified), new DateTime(2020, 9, 18, 12, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 13, 0, 0), new DateTime(2020, 9, 18, 14, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 20, 0, 0), new DateTime(2020, 9, 18, 21, 0, 0))}),
							Meeting2check = new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 12, 30, 0), new DateTime(2020, 9, 18, 13, 0, 0))
						},
						ExpectedValue = true
					}
				};
				yield return new object[]
				{
					new ExpectedValueTestData
					{
						Name = "p2",
						Params = new Parameters{
							Instance = new MeetingCalculator.AppointmentChecker(new List<MeetingCalculator.MeetingAppointment> {new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 8, 0, 0), new DateTime(2020, 9, 18, 9, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 9, 0, 0), new DateTime(2020, 9, 18, 10, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 10, 0, 0), new DateTime(2020, 9, 18, 11, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 11, 0, 0, DateTimeKind.Unspecified), new DateTime(2020, 9, 18, 12, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 13, 0, 0), new DateTime(2020, 9, 18, 14, 0, 0))}),
							Meeting2check = new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 12, 30, 0), new DateTime(2020, 9, 18, 13, 0, 0))
						},
						ExpectedValue = true
					}
				};
				yield return new object[]
				{
					new ExpectedValueTestData
					{
						Name = "p3",
						Params = new Parameters{
							Instance = new MeetingCalculator.AppointmentChecker(new List<MeetingCalculator.MeetingAppointment> {new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 8, 0, 0), new DateTime(2020, 9, 18, 9, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 9, 0, 0), new DateTime(2020, 9, 18, 10, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 10, 0, 0), new DateTime(2020, 9, 18, 11, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 11, 0, 0, DateTimeKind.Unspecified), new DateTime(2020, 9, 18, 12, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 13, 0, 0), new DateTime(2020, 9, 18, 14, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 20, 0, 0), new DateTime(2020, 9, 18, 21, 0, 0))}),
							Meeting2check = new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 13, 0, 0), new DateTime(2020, 9, 18, 13, 30, 0))
						},
						ExpectedValue = false
					}
				};
				yield return new object[]
				{
					new ExpectedValueTestData
					{
						Name = "1",
						Params = new Parameters{
							Instance = MyCalendarFactroy(),
							Meeting2check = new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 13, 0, 0), new DateTime(2020, 9, 18, 13, 30, 0))
						},
						ExpectedValue = true
					}
				};
			}

			public string GetDisplayName(MethodInfo methodInfo, object[] data)
			{
				return (data[0] as ExpectedValueTestData)?.Name;
			}
		}

		[AttributeUsage(AttributeTargets.Method)]
		private class TestsThrowingExceptionAttribute : Attribute, ITestDataSource
		{
			public IEnumerable<object[]> GetData(MethodInfo methodInfo)
			{
				yield return new object[]
				{
					new TestThrowingExceptionData
					{
						Name = "n1 - instance: invalidCalendarZeroTime",
						Params = new Parameters{
							Instance = new MeetingCalculator.AppointmentChecker(new List<MeetingCalculator.MeetingAppointment> {new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 8, 0, 0), new DateTime(2020, 9, 18, 8, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 9, 0, 0), new DateTime(2020, 9, 18, 9, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 10, 0, 0), new DateTime(2020, 9, 18, 11, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 11, 0, 0, DateTimeKind.Unspecified), new DateTime(2020, 9, 18, 12, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 13, 0, 0), new DateTime(2020, 9, 18, 14, 0, 0))}),
							Meeting2check = new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 12, 30, 0), new DateTime(2020, 9, 18, 13, 0, 0))
						},
						ExpectedException = typeof(Exception)
					}
				};
				yield return new object[]
				{
					new TestThrowingExceptionData
					{
						Name = "n2 - Meeting2check: invalidAppointmentTime",
						Params = new Parameters{
							Instance = new MeetingCalculator.AppointmentChecker(new List<MeetingCalculator.MeetingAppointment> {new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 8, 0, 0), new DateTime(2020, 9, 18, 9, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 9, 0, 0), new DateTime(2020, 9, 18, 10, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 10, 0, 0), new DateTime(2020, 9, 18, 11, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 11, 0, 0, DateTimeKind.Unspecified), new DateTime(2020, 9, 18, 12, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 13, 0, 0), new DateTime(2020, 9, 18, 14, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 20, 0, 0), new DateTime(2020, 9, 18, 21, 0, 0))}),
							Meeting2check = new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 13, 0, 0), new DateTime(2020, 9, 18, 13, 0, 0))
						},
						ExpectedException = typeof(Exception)
					}
				};
				yield return new object[]
				{
					new TestThrowingExceptionData
					{
						Name = "n3 - Meeting2check: invalidAppointmentEndStart",
						Params = new Parameters{
							Instance = new MeetingCalculator.AppointmentChecker(new List<MeetingCalculator.MeetingAppointment> {new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 8, 0, 0), new DateTime(2020, 9, 18, 9, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 9, 0, 0), new DateTime(2020, 9, 18, 10, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 10, 0, 0), new DateTime(2020, 9, 18, 11, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 11, 0, 0, DateTimeKind.Unspecified), new DateTime(2020, 9, 18, 12, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 13, 0, 0), new DateTime(2020, 9, 18, 14, 0, 0))}),
							Meeting2check = new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 13, 30, 0), new DateTime(2020, 9, 18, 13, 0, 0))
						},
						ExpectedException = typeof(Exception)
					}
				};
			}

			public string GetDisplayName(MethodInfo methodInfo, object[] data)
			{
				return (data[0] as TestThrowingExceptionData)?.Name;
			}
		}

		[DataTestMethod]
		[PositiveTests]
		public void CheckAppointmentTest(ExpectedValueTestData data)
		{
			var actual = data.Params.Instance.CheckAppointment(data.Params.Meeting2check);
			Assert.AreEqual(data.ExpectedValue, actual);
		}

		[DataTestMethod]
		[TestsThrowingException]
		public void CheckAppointmentTestThrowingException(TestThrowingExceptionData data)
		{
			try
			{
				data.Params.Instance.CheckAppointment(data.Params.Meeting2check);
				Assert.Fail();
			}
			catch (Exception e)
			{
				Assert.AreEqual(e.GetType(), data.ExpectedException);
			}
		}

		public class ExpectedValueTestData
		{
			public string Name;
			public Parameters Params;
			public Boolean ExpectedValue;
		}

		public class TestThrowingExceptionData
		{
			public string Name;
			public Parameters Params;
			public Type ExpectedException;
		}

		public class Parameters {
			public MeetingCalculator.AppointmentChecker Instance;
			public MeetingCalculator.MeetingAppointment Meeting2check;
		}
	}
}

/*
WARNING: Modification of this comment will make it impossible to merge user-defined changes

BEGIN_CODEGEN_DATA
H4sIAAAAAAAAAO1aUW/bNhB+VoD8h0Of5MKRYznt6qTrkDnO5rVOikYtsBl5oKVTwlUWVZJy6wX57yUlSrZiO/U2N1t
rAw4i6o53x4/HjzpKjce7O4/h5BzOzj3on5/0Tn8H79feBXTO+/3umaelv2CMnEgMYDiBAMcjda3veygkjFiA0SEEP4
QHrtsK90L/abB3QFrDvTY2/b0nbf9JgO5TEraJ6tPY3dndickIRUJ8hD6ipPFVh0R+GhHJuDYpdndudnesVCgJXEyEx
NHRnbbTYVGEvqQsFk4WHvXndN5gaHSmoj71ORMslM47KlISXcg0oMzRbj3GIuG8janULaV8pGO1BrrViYgQl6qVpMOI
+uDrNnSu0X9/nCSMxnKEcdavQ4TCxtIDsBJOxwoqEJJI1WlusM5M38wWcuhPlBzjgPBT4kvOJnZNm8rsWY0GeOdqrug
oiVD3glApMT7JpPKas48Q40c4Y7JXqGDQ/eRjomGwaxoI6zYblzU4lpLTYSrxrSBXaJdNj/ArlMLpo7xmQe1ydij5wF
8zQSUdYzZbZT84hPK6Dj0tPCGSXLCU+zgdhIGw143TkUqrYYTP2fBPNVGDyxcq1bI+du67F4cMRuVlhoSxYk0oRgFwl
CmPs0EXRnKx0bK0pPspURIM3pEoxSIsIy/0rDOVlPAjPEqasAeNxisav/fYb5QT1YhUAySD479Sjic4Zol4gx9SyjOE
xaN6YeQ14WQklBntNmugRC5KJ1YvVskQ+2hUVkkJWyu+okI+n9c2d2Y6vYCbxYbnVTPDCgr06Ahtd9/dr0O7Ds1ndVA
/1div1WG5TtvoGKV/6bG9gsfm/lpdlubu9dlcr09jrl7KX9I4UKwjVIrSkGJwfzTueqNprYLAwVp9uqug7pao39bKxW
UZP66vF8bSFfT3EFCAtr4MQYFTrYjltoyqQi4qKMlTNLLb/P/t0VdmLHdLQFsC2gQC2pLBl8mgtSWDLRlsAhl8j08jK
yHQKlhqBQIKSSQemIGa/4yAFhS+3xjWS8neFNxF5StUjRxfZaUuFUlEJhq5xRVvvZwUCBTklQLYzJytBYP9SyBi8TzV
fnK0gzKUdRwAZIW/p88b1EjK84X//0lAds5zN+z7kjnWpwHUZOmhuhqTiAZFpv6BnOmk2cwt99mDb7nr3eS3O+73+vh
dLm3NypMEWWiXt2oLKfrrkoirSKQCWMkks6fHG0sk22f3TWOSTX52/9bIq7UKeXXj4EISLrcEtiWwTSCwByCT/+pR6M
Gq1aVUtLxi1VLdLXef0dug8jI6r1XzyMeMBgvf0dsL6+RpzHnIY8KB+DIlkYJOy5yc0pyCuJy7tu1ZrUpW5C/erWMhk
EvnmGP3g7Kb61eCqRuX1Tf1i4a9uARfafxzveylU3EXFGm+NTCzuh5YClxOCY3MNwomJ30i/WuYZixgJanu4omOSlNP
Zbmt1k0F3GnOz2dV5ZuOpUddNwsWxTRLzf3pPpdfior0Z8YiJHHVx9GySO7dqdcQjcYJ5vBZGs6MsYrzlb5qKXLj6P6
e8xxZffIogtN/6vcZoPb6RbwkAAA=
END_CODEGEN_DATA
*/
