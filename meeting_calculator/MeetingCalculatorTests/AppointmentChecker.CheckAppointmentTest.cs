/*
* DO NOT MODIFY THIS COMMENT
* Generated by devmate
* Test model: d7f4223f-fc6d-4a3b-9e1c-59c5de26af9a
*/

namespace MeetingCalculator.Tests
{
	using System;
	using System.Collections.Generic;
	using NUnit.Framework;
	
	public class CheckAppointmentTestCase
	{
		private static MeetingCalculator.AppointmentChecker CreateMyCalendarFactroy()
		{
			return new MeetingCalculator.AppointmentChecker(
				new List<MeetingCalculator.MeetingAppointment>
				{
					new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 30, 8, 0, 0), new DateTime(2020, 9,  30, 9, 0, 0)),
					new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 30, 9, 0, 0), new DateTime(2020, 9,  30, 10, 0, 0)),
					new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 30, 10, 0, 0), new DateTime(2020, 9, 30, 11, 0, 0)),
					new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 30, 11, 0, 0), new DateTime(2020, 9, 30, 12, 0, 0)),
					new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 30, 13, 0, 0), new DateTime(2020, 9, 30, 14, 0, 0)),
					new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 30, 14, 0, 0), new DateTime(2020, 9, 30, 15, 0, 0))
					});
		}
		
		private static IEnumerable<TestCaseData> PositiveTests()
		{
			yield return new TestCaseData(new MeetingCalculator.AppointmentChecker(new List<MeetingCalculator.MeetingAppointment> {new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 8, 0, 0), new DateTime(2020, 9, 18, 9, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 9, 0, 0), new DateTime(2020, 9, 18, 10, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 10, 0, 0), new DateTime(2020, 9, 18, 11, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 11, 0, 0, DateTimeKind.Unspecified), new DateTime(2020, 9, 18, 12, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 13, 0, 0), new DateTime(2020, 9, 18, 14, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 20, 0, 0), new DateTime(2020, 9, 18, 21, 0, 0))}), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 12, 30, 0), new DateTime(2020, 9, 18, 13, 0, 0)), true)
				.SetName("p1")
				.SetDescription("//LinkToJira //link to AzureDevopsRequirements");
			yield return new TestCaseData(new MeetingCalculator.AppointmentChecker(new List<MeetingCalculator.MeetingAppointment> {new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 8, 0, 0), new DateTime(2020, 9, 18, 9, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 9, 0, 0), new DateTime(2020, 9, 18, 10, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 10, 0, 0), new DateTime(2020, 9, 18, 11, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 11, 0, 0, DateTimeKind.Unspecified), new DateTime(2020, 9, 18, 12, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 13, 0, 0), new DateTime(2020, 9, 18, 14, 0, 0))}), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 12, 30, 0), new DateTime(2020, 9, 18, 13, 0, 0)), true)
				.SetName("p2")
				.SetDescription("");
			yield return new TestCaseData(new MeetingCalculator.AppointmentChecker(new List<MeetingCalculator.MeetingAppointment> {new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 8, 0, 0), new DateTime(2020, 9, 18, 9, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 9, 0, 0), new DateTime(2020, 9, 18, 10, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 10, 0, 0), new DateTime(2020, 9, 18, 11, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 11, 0, 0, DateTimeKind.Unspecified), new DateTime(2020, 9, 18, 12, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 13, 0, 0), new DateTime(2020, 9, 18, 14, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 20, 0, 0), new DateTime(2020, 9, 18, 21, 0, 0))}), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 13, 0, 0), new DateTime(2020, 9, 18, 13, 30, 0)), false)
				.SetName("p3")
				.SetDescription("");
			yield return new TestCaseData(CreateMyCalendarFactroy(), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 13, 0, 0), new DateTime(2020, 9, 18, 13, 30, 0)), true)
				.SetName("1")
				.SetDescription("");
		}
		
		private static IEnumerable<TestCaseData> TestsThrowingException()
		{
			yield return new TestCaseData(new MeetingCalculator.AppointmentChecker(new List<MeetingCalculator.MeetingAppointment> {new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 8, 0, 0), new DateTime(2020, 9, 18, 8, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 9, 0, 0), new DateTime(2020, 9, 18, 9, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 10, 0, 0), new DateTime(2020, 9, 18, 11, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 11, 0, 0, DateTimeKind.Unspecified), new DateTime(2020, 9, 18, 12, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 13, 0, 0), new DateTime(2020, 9, 18, 14, 0, 0))}), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 12, 30, 0), new DateTime(2020, 9, 18, 13, 0, 0)), typeof(Exception))
				.SetName("n1")
				.SetDescription("instance: invalidCalendarZeroTime");
			yield return new TestCaseData(new MeetingCalculator.AppointmentChecker(new List<MeetingCalculator.MeetingAppointment> {new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 8, 0, 0), new DateTime(2020, 9, 18, 9, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 9, 0, 0), new DateTime(2020, 9, 18, 10, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 10, 0, 0), new DateTime(2020, 9, 18, 11, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 11, 0, 0, DateTimeKind.Unspecified), new DateTime(2020, 9, 18, 12, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 13, 0, 0), new DateTime(2020, 9, 18, 14, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 20, 0, 0), new DateTime(2020, 9, 18, 21, 0, 0))}), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 13, 0, 0), new DateTime(2020, 9, 18, 13, 0, 0)), typeof(Exception))
				.SetName("n2")
				.SetDescription("Meeting2check: invalidAppointmentTime");
			yield return new TestCaseData(new MeetingCalculator.AppointmentChecker(new List<MeetingCalculator.MeetingAppointment> {new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 8, 0, 0), new DateTime(2020, 9, 18, 9, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 9, 0, 0), new DateTime(2020, 9, 18, 10, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 10, 0, 0), new DateTime(2020, 9, 18, 11, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 11, 0, 0, DateTimeKind.Unspecified), new DateTime(2020, 9, 18, 12, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 13, 0, 0), new DateTime(2020, 9, 18, 14, 0, 0))}), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 13, 30, 0), new DateTime(2020, 9, 18, 13, 0, 0)), typeof(Exception))
				.SetName("n3")
				.SetDescription("Meeting2check: invalidAppointmentEndStart");
		}
		
		[Test]
		[TestCaseSource("PositiveTests")]
		public void CheckAppointmentTest(MeetingCalculator.AppointmentChecker instance, MeetingCalculator.MeetingAppointment Meeting2check, Boolean expected)
		{
			Boolean actual = instance.CheckAppointment(Meeting2check);
			Assert.AreEqual(expected, actual);
		}
			
		[Test]
		[TestCaseSource("TestsThrowingException")]
		public void CheckAppointmentTestThrowingException(MeetingCalculator.AppointmentChecker instance, MeetingCalculator.MeetingAppointment Meeting2check, Type expected)
		{
			Assert.Throws(expected, () => instance.CheckAppointment(Meeting2check));
		}
	}
}

/*
WARNING: Modification of this comment will make it impossible to merge user-defined changes

BEGIN_CODEGEN_DATA
H4sIAAAAAAAAAO1ZW08aQRR+hoT/cMLTYhBkUStaTSxgayvQlO1D2/RhnD20E5eZdWYWpcb/3pl1QRSw25b0optAsjt
z7uz37TlMda2QX4NWD7o9Dzq91vHRB/BeHfeh2et02l3P7r5EjpJo9OF0DD6OhubarnuoNAyFj8Eu+M8Gm65bH6wP6L
a/vknqp+sNrNH1rQbd8tHdJoMGMTrVQr6Q52SIKiQUoYOoGf/SJAGNAqKFrFibqpC/KuRzkTJb0B8rjcO9e/eVpggCp
JoJripxfIzeynTfc6YrR9L4uRDybM86zYXRacAo0IAoBc2vSM8Ow1AwrofItXXbJMqklbOuc6FkI5MlKE20UZqPc0Y3
toUSmhKNSmdspJD7RB4RqqUYOyVrMLaaq1bB65lis2EYoNWFgRESchzv6q9SXADHi0mSXaGPJ5Loty8phjZjp2RTzV3
Had0P9bjNo6H5uU4DfD7JqkU0OYC3QjHNRhiXeDaqMcPAB4k6kjx2P6vn2IU0+ceCJ0zp5/PSycqM0gFcLTY8LxobNq
Ggx4bouBvuRhkaZajtlMF8zM1GqQzLZRqJTCL0mx4bKTzWNlbqcmruQZ+11fpMzJWn+28Y9yvvuQqRsgFD/+Fo3NVGU
09Tgc2V+nTTVN2dVv16RZmawtV/nGr9NlUtI4yxnMtV+qi7hvOcYlgrzqy1UFHJbqijWK2eMH7middMEqhWA3MDWsDh
t0hiC0ciVO/wPGIyJh1VvKGajCIyinhUFPGPwdVdCtcMgBkAHyMA/+d3dKpM6xNmMGIDEqgFqK//JuqXDhx/Kc2F3La
8Eyn+2hgTjy+eHZVMKjMz0VOZZ3b+OFeulp0zqvxvepVxiGLgTDFWmgM3X45uxg2SOcVdYHxEAuZPWOojSmH9Zp1N1t
k8Rrg+hc7mJxhi+WiThOZSi+ApTcz+KZuxRMYSj5QlVojYlb/Ul88lP4Rsm/t9TaS+29t/smD9PL2ysO2LSFLj7M6hR
LEUCyUnNSPB/IUHNU6q45hJA1JOVWO4k1oZXggRIOGAl+Zh0uZRuh0vJltm2opIAPtTT5X7wTp3jCZMdqgUSl05lNg+
N/rOxEM5MZi2covnoJQlnJ+f/kBNPfPoLSpoUpE4JjVTD6cE+wepqzutm/2az3fjKap62hwAAA==
END_CODEGEN_DATA
*/
