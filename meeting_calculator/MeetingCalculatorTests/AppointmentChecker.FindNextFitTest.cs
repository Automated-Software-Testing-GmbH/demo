/*
* DO NOT MODIFY THIS COMMENT
* Generated by devmate
* Test model: 13d8a81d-6d43-4331-b844-0a3d7cd09b17
*/

namespace MeetingCalculatorTests
{
	using System;
	using System.Collections.Generic;
	using NUnit.Framework;

	public class FindNextFitTestCase
	{
		private static MeetingCalculator.AppointmentChecker MyCalendarFactroy()
		{
			return new MeetingCalculator.AppointmentChecker(
			new List<MeetingCalculator.MeetingAppointment>
				{
					new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 30, 8, 0, 0), new DateTime(2020, 9,  30, 9, 0, 0)),
					new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 30, 9, 0, 0), new DateTime(2020, 9,  30, 10, 0, 0)),
					new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 30, 10, 0, 0), new DateTime(2020, 9, 30, 11, 0, 0)),
					new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 30, 11, 0, 0), new DateTime(2020, 9, 30, 12, 0, 0)),
					new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 30, 13, 0, 0), new DateTime(2020, 9, 30, 14, 0, 0)),
					new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 30, 14, 0, 0), new DateTime(2020, 9, 30, 15, 0, 0))
					});
		}

		private static IEnumerable<TestCaseData> PositiveTests()
		{
			yield return new TestCaseData(
				new ExpectedValueTestData
				{
					ObjectUnderTest = new MeetingCalculator.AppointmentChecker(new List<MeetingCalculator.MeetingAppointment> {new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 8, 0, 0), new DateTime(2020, 9, 18, 9, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 9, 0, 0), new DateTime(2020, 9, 18, 10, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 10, 0, 0), new DateTime(2020, 9, 18, 11, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 11, 0, 0, DateTimeKind.Unspecified), new DateTime(2020, 9, 18, 12, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 13, 0, 0), new DateTime(2020, 9, 18, 14, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 20, 0, 0), new DateTime(2020, 9, 18, 21, 0, 0))}),
					Params = new Parameters
					{
						text = "Better call Soul",
						dayToFitMeeting = new DateTime(2020, 9, 18, 0, 0, 0),
						durationHours = 1,
						durationMinutes = 0
					},
					ExpectedValue = new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 12, 0, 0), new DateTime(2020, 9, 18, 13, 0, 0), "Better call Soul")
				}
			).SetName(@"FoundLuchbreak");
			
			yield return new TestCaseData(
				new ExpectedValueTestData
				{
					ObjectUnderTest = new MeetingCalculator.AppointmentChecker(new List<MeetingCalculator.MeetingAppointment> {new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 8, 0, 0), new DateTime(2020, 9, 18, 9, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 9, 0, 0), new DateTime(2020, 9, 18, 10, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 10, 0, 0), new DateTime(2020, 9, 18, 11, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 11, 0, 0), new DateTime(2020, 9, 18, 12, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 13, 0, 0), new DateTime(2020, 9, 18, 14, 0, 0))}),
					Params = new Parameters
					{
						text = "Better call Soul",
						dayToFitMeeting = new DateTime(2020, 9, 18, 0, 0, 0),
						durationHours = 0,
						durationMinutes = 30
					},
					ExpectedValue = new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 12, 0, 0), new DateTime(2020, 9, 18, 12, 30, 0), "Better call Soul")
				}
			).SetName(@"FoundBeforLunch");
			
			yield return new TestCaseData(
				new ExpectedValueTestData
				{
					ObjectUnderTest = MyCalendarFactroy(),
					Params = new Parameters
					{
						text = "Better call Soul",
						dayToFitMeeting = new DateTime(2020, 9, 18, 0, 0, 0),
						durationHours = 1,
						durationMinutes = 0
					},
					ExpectedValue = new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 8, 0, 0), new DateTime(2020, 9, 18, 9, 0, 0), "Better call Soul")
				}
			).SetName(@"emptyDayMorning");
		}

		private static IEnumerable<TestCaseData> NegativeTests()
		{
			yield return new TestCaseData(
				new ExpectedValueTestData
				{
					ObjectUnderTest = MyCalendarFactroy(),
					Params = new Parameters
					{
						text = null,
						dayToFitMeeting = new DateTime(2020, 9, 18, 0, 0, 0),
						durationHours = 1,
						durationMinutes = 0
					},
					ExpectedValue = new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 8, 0, 0), new DateTime(2020, 9, 18, 9, 0, 0))
				}
			).SetName(@"foundBreakNoString - text: invalid");
		}

		private static IEnumerable<TestCaseData> TestsThrowingException()
		{
			yield return new TestCaseData(
				new TestThrowingExceptionData
				{
					ObjectUnderTest = new MeetingCalculator.AppointmentChecker(new List<MeetingCalculator.MeetingAppointment> {new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 8, 0, 0), new DateTime(2020, 9, 18, 8, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 9, 0, 0), new DateTime(2020, 9, 18, 9, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 10, 0, 0), new DateTime(2020, 9, 18, 11, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 11, 0, 0, DateTimeKind.Unspecified), new DateTime(2020, 9, 18, 12, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 13, 0, 0), new DateTime(2020, 9, 18, 14, 0, 0))}),
					Params = new Parameters
					{
						text = "Better call Soul",
						dayToFitMeeting = new DateTime(2020, 9, 18, 0, 0, 0),
						durationHours = 0,
						durationMinutes = 30
					},
					ExpectedException = typeof(Exception)
				}
			).SetName(@"InvalidCalendar - instance: invalidCalendarZeroTime");
			
			yield return new TestCaseData(
				new TestThrowingExceptionData
				{
					ObjectUnderTest = new MeetingCalculator.AppointmentChecker(null),
					Params = new Parameters
					{
						text = "Better call Soul",
						dayToFitMeeting = new DateTime(2020, 9, 18, 0, 0, 0),
						durationHours = 0,
						durationMinutes = 30
					},
					ExpectedException = typeof(Exception)
				}
			).SetName(@"CalendarNull - instance: invalidCalendarZeroTime");
			
			yield return new TestCaseData(
				new TestThrowingExceptionData
				{
					ObjectUnderTest = new MeetingCalculator.AppointmentChecker(new List<MeetingCalculator.MeetingAppointment> {new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 8, 0, 0), new DateTime(2020, 9, 18, 9, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 9, 0, 0), new DateTime(2020, 9, 18, 10, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 10, 0, 0), new DateTime(2020, 9, 18, 11, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 11, 0, 0, DateTimeKind.Unspecified), new DateTime(2020, 9, 18, 12, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 13, 0, 0), new DateTime(2020, 9, 18, 14, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 20, 0, 0), new DateTime(2020, 9, 18, 21, 0, 0))}),
					Params = new Parameters
					{
						text = "Better call Soul",
						dayToFitMeeting = new DateTime(2020, 9, 18, 0, 0, 0),
						durationHours = -2,
						durationMinutes = 0
					},
					ExpectedException = typeof(Exception)
				}
			).SetName(@"negativHour - durationHours: invalid");
			
			yield return new TestCaseData(
				new TestThrowingExceptionData
				{
					ObjectUnderTest = new MeetingCalculator.AppointmentChecker(new List<MeetingCalculator.MeetingAppointment> {new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 8, 0, 0), new DateTime(2020, 9, 18, 9, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 9, 0, 0), new DateTime(2020, 9, 18, 10, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 10, 0, 0), new DateTime(2020, 9, 18, 11, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 11, 0, 0), new DateTime(2020, 9, 18, 12, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 13, 0, 0), new DateTime(2020, 9, 18, 14, 0, 0))}),
					Params = new Parameters
					{
						text = "Better call Soul",
						dayToFitMeeting = new DateTime(2020, 9, 18, 0, 0, 0),
						durationHours = 0,
						durationMinutes = -1
					},
					ExpectedException = typeof(Exception)
				}
			).SetName(@"negativMinutes - durationMinutes: invalid");
		}

		[Test]
		[TestCaseSource(nameof(PositiveTests))]
		[TestCaseSource(nameof(NegativeTests))]
		public void FindNextFitTest(ExpectedValueTestData data)
		{
			var actual = data.ObjectUnderTest.FindNextFit(data.Params.text, data.Params.dayToFitMeeting, data.Params.durationHours, data.Params.durationMinutes);
			Assert.AreEqual(data.ExpectedValue, actual);
		}

		[Test]
		[TestCaseSource(nameof(TestsThrowingException))]
		public void FindNextFitTestThrowingException(TestThrowingExceptionData data)
		{
			Assert.Throws(data.ExpectedException, () => data.ObjectUnderTest.FindNextFit(data.Params.text, data.Params.dayToFitMeeting, data.Params.durationHours, data.Params.durationMinutes));
		}

		public class ExpectedValueTestData
		{
			public MeetingCalculator.AppointmentChecker ObjectUnderTest;
			public Parameters Params;
			public MeetingCalculator.MeetingAppointment ExpectedValue;
		}

		public class TestThrowingExceptionData
		{
			public MeetingCalculator.AppointmentChecker ObjectUnderTest;
			public Parameters Params;
			public Type ExpectedException;
		}

		public class Parameters
		{
			public String text;
			public DateTime dayToFitMeeting;
			public Int32 durationHours;
			public Int32 durationMinutes;
		}
	}
}

/*
WARNING: Modification of this comment will make it impossible to merge user-defined changes

BEGIN_CODEGEN_DATA
H4sIAAAAAAAAAO1aW2/iRhR+NhL/YcSTWQHhpi7Z7EbNJtBFDbASpFJb9WGwD5tpzIw7HpOgVf57zxib2OZSoGxKtZZ
IsOecOXd/c2bM2Zt87g25GZD+YER6g5tu51cy+tQdkutBr9fujzT1J+AgqQKbjOfEhtkUr/X4CDxFpsIG5x2pNewWbd
Xs8g92s1FuNhq18rjVbJartGG/tezq+bj2Fuec5XP5HKdT8FxqAekBKMa/XFPH8h2qhNQivXzuaz5n+B5SyHDuKZhep
O4r18JxwFJMcK8SmMesF57+HWeq0pGo5lHIhwut03D9scMsYjnU80iHcbsPT6rDlNZ4TT10yNBaDVeyGfpHPEUV8q9Y
WLlyXcG4mgJX1/dgPYAkvTnSgdtUdqilpJibRS0qkGecnZHRAAPMpq4DehaZIJOQ84Cq7qV4JBweSV+obsQCdvvJAlf
7Zxa1Y8Zz4ETaum6b+1PMzdiB95EjN1TRS/JZeEyxGQQBjZszZ+DYRILyJQ/0xueZAYuhh9tPLgYY7F+o4wdSNH1BXg
gyjMH4T2S54zYEeSMfAnm7RMzUjLfMU+9XucOR2KRL8nW94FXWQDBaCiM2BbNerVdL5LxEaq0SwQ/eVIslspnnPOQJm
f6lxvMdNNaqR1W5FLdVZ+24OkNxpSX9Z3y8KnfcwwpiEwb2dmvqx7WmsUsEmkfVWd8l6vVl1J+LpfAJ+kwRpLzwwQlu
QIH0Qmr0nBkKoQqZCh9BIZlY1HHIUPhOIZJj2HQ+EohmodmhxPWGLI1dTvYR3RFqPglfamNqK5Qe474CTauGpOeIJ4E
TGyFgvxTWd0nhS55X41JcGPccfBUrQ1B9DK35Y6EjfG7f+tb9WAJ9KCyw1ciAMQPGbwiMJwx/pw5F1S1Q1DgdLEKmxo
Fg9BEmQt763Lp/PTRa06+edhn81yvSPhC5VwnA1FXzGzrvCcnRmsJhzX4fvtDXb/aPVkXcd5ysbjbWyCSACd2v9MVQS
R2UMtGhe0cYn1GH2QeWTVAuI70BRZmxDef+9aOHVwR9D31R66iL9y590XE7sWy/mDVM8dMm5FJzF8TEXA5txKXuAnyi
RQBBiXHEHG7BEpgi2m8ghXbmoBbnFcAFF6Asr1Feo6T1MSr/56Se5oqR7aS/tyUjO2JchbNy/ZDO/CA444vNkdaMaJY
wJN1AZxCWQVh2GHiyoLGtByrXvgVoRPJfcCMc2bD1/l0/4X8srzRoYDykBaZ+542aE69li8VtrIlDnZA1fIk9E8xOv8
M2157hEBv/xTb0M+zTqaV86mA0NK2SgqdKTKwZMCxqoaJzXSLxkVRuU8R47taTwlCG0HvleSBV5UpC+y80b6E74VMpt
Hy/iK8/5PjneK6ei2zE+3SQQ1cCXi/pyHJeiZhF8uHyVHKQPECK/1Ri49HgwteQd6efSaTcvIgLeAGZxaV3sV38Kg4m
Ld3oz9ZV+zV9GiEWkZW62Gh3EoUThoaHgro6EhoimCWpKkkwdblq1JNt0RZ6WC+RlfoPP38Dkmc/fEUkAAA=
END_CODEGEN_DATA
*/
