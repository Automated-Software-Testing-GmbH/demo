/*
* DO NOT MODIFY THIS COMMENT
* Generated by devmate
* Test model: d7f4223f-fc6d-4a3b-9e1c-59c5de26af9a
*/

namespace MeetingCalculatorTests
{
	using System;
	using System.Collections.Generic;
	using Xunit;

	public class CheckAppointmentTestCase
	{
		private static MeetingCalculator.AppointmentChecker MyCalendarFactroy()
		{
			return new MeetingCalculator.AppointmentChecker(
				new List<MeetingCalculator.MeetingAppointment>
				{
					new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 30, 8, 0, 0), new DateTime(2020, 9,  30, 9, 0, 0)),
					new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 30, 9, 0, 0), new DateTime(2020, 9,  30, 10, 0, 0)),
					new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 30, 10, 0, 0), new DateTime(2020, 9, 30, 11, 0, 0)),
					new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 30, 11, 0, 0), new DateTime(2020, 9, 30, 12, 0, 0)),
					new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 30, 13, 0, 0), new DateTime(2020, 9, 30, 14, 0, 0)),
					new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 30, 14, 0, 0), new DateTime(2020, 9, 30, 15, 0, 0))
					});
		}

		private class PositiveTests : TheoryData<ExpectedValueTestData>
		{
			public PositiveTests() {
				Add(new ExpectedValueTestData{
					Name = @"p1 - //LinkToJira //link to AzureDevopsRequirements",
					Params = new Parameters{
						Instance = new MeetingCalculator.AppointmentChecker(new List<MeetingCalculator.MeetingAppointment> {new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 8, 0, 0), new DateTime(2020, 9, 18, 9, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 9, 0, 0), new DateTime(2020, 9, 18, 10, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 10, 0, 0), new DateTime(2020, 9, 18, 11, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 11, 0, 0, DateTimeKind.Unspecified), new DateTime(2020, 9, 18, 12, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 13, 0, 0), new DateTime(2020, 9, 18, 14, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 20, 0, 0), new DateTime(2020, 9, 18, 21, 0, 0))}),
						Meeting2check = new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 12, 30, 0), new DateTime(2020, 9, 18, 13, 0, 0))
					},
					ExpectedValue = true
				});
				Add(new ExpectedValueTestData{
					Name = @"p2",
					Params = new Parameters{
						Instance = new MeetingCalculator.AppointmentChecker(new List<MeetingCalculator.MeetingAppointment> {new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 8, 0, 0), new DateTime(2020, 9, 18, 9, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 9, 0, 0), new DateTime(2020, 9, 18, 10, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 10, 0, 0), new DateTime(2020, 9, 18, 11, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 11, 0, 0, DateTimeKind.Unspecified), new DateTime(2020, 9, 18, 12, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 13, 0, 0), new DateTime(2020, 9, 18, 14, 0, 0))}),
						Meeting2check = new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 12, 30, 0), new DateTime(2020, 9, 18, 13, 0, 0))
					},
					ExpectedValue = true
				});
				Add(new ExpectedValueTestData{
					Name = @"p3",
					Params = new Parameters{
						Instance = new MeetingCalculator.AppointmentChecker(new List<MeetingCalculator.MeetingAppointment> {new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 8, 0, 0), new DateTime(2020, 9, 18, 9, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 9, 0, 0), new DateTime(2020, 9, 18, 10, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 10, 0, 0), new DateTime(2020, 9, 18, 11, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 11, 0, 0, DateTimeKind.Unspecified), new DateTime(2020, 9, 18, 12, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 13, 0, 0), new DateTime(2020, 9, 18, 14, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 20, 0, 0), new DateTime(2020, 9, 18, 21, 0, 0))}),
						Meeting2check = new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 13, 0, 0), new DateTime(2020, 9, 18, 13, 30, 0))
					},
					ExpectedValue = false
				});
				Add(new ExpectedValueTestData{
					Name = @"1",
					Params = new Parameters{
						Instance = MyCalendarFactroy(),
						Meeting2check = new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 13, 0, 0), new DateTime(2020, 9, 18, 13, 30, 0))
					},
					ExpectedValue = true
				});
			}
		}

		private class TestsThrowingException : TheoryData<TestThrowingExceptionData>
		{
			public TestsThrowingException() {
				Add(new TestThrowingExceptionData{
					Name = @"n1 - instance: invalidCalendarZeroTime",
					Params = new Parameters{
						Instance = new MeetingCalculator.AppointmentChecker(new List<MeetingCalculator.MeetingAppointment> {new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 8, 0, 0), new DateTime(2020, 9, 18, 8, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 9, 0, 0), new DateTime(2020, 9, 18, 9, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 10, 0, 0), new DateTime(2020, 9, 18, 11, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 11, 0, 0, DateTimeKind.Unspecified), new DateTime(2020, 9, 18, 12, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 13, 0, 0), new DateTime(2020, 9, 18, 14, 0, 0))}),
						Meeting2check = new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 12, 30, 0), new DateTime(2020, 9, 18, 13, 0, 0))
					},
					ExpectedException = typeof(Exception)
				});
				Add(new TestThrowingExceptionData{
					Name = @"n2 - Meeting2check: invalidAppointmentTime",
					Params = new Parameters{
						Instance = new MeetingCalculator.AppointmentChecker(new List<MeetingCalculator.MeetingAppointment> {new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 8, 0, 0), new DateTime(2020, 9, 18, 9, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 9, 0, 0), new DateTime(2020, 9, 18, 10, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 10, 0, 0), new DateTime(2020, 9, 18, 11, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 11, 0, 0, DateTimeKind.Unspecified), new DateTime(2020, 9, 18, 12, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 13, 0, 0), new DateTime(2020, 9, 18, 14, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 20, 0, 0), new DateTime(2020, 9, 18, 21, 0, 0))}),
						Meeting2check = new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 13, 0, 0), new DateTime(2020, 9, 18, 13, 0, 0))
					},
					ExpectedException = typeof(Exception)
				});
				Add(new TestThrowingExceptionData{
					Name = @"n3 - Meeting2check: invalidAppointmentEndStart",
					Params = new Parameters{
						Instance = new MeetingCalculator.AppointmentChecker(new List<MeetingCalculator.MeetingAppointment> {new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 8, 0, 0), new DateTime(2020, 9, 18, 9, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 9, 0, 0), new DateTime(2020, 9, 18, 10, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 10, 0, 0), new DateTime(2020, 9, 18, 11, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 11, 0, 0, DateTimeKind.Unspecified), new DateTime(2020, 9, 18, 12, 0, 0)), new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 13, 0, 0), new DateTime(2020, 9, 18, 14, 0, 0))}),
						Meeting2check = new MeetingCalculator.MeetingAppointment(new DateTime(2020, 9, 18, 13, 30, 0), new DateTime(2020, 9, 18, 13, 0, 0))
					},
					ExpectedException = typeof(Exception)
				});
			}
		}

		[Theory]
		[ClassData(typeof(PositiveTests))]
		public void CheckAppointmentTest(ExpectedValueTestData data)
		{
			var actual = data.Params.Instance.CheckAppointment(data.Params.Meeting2check);
			Assert.Equal(data.ExpectedValue, actual);
		}

		[Theory]
		[ClassData(typeof(TestsThrowingException))]
		public void CheckAppointmentTestThrowingException(TestThrowingExceptionData data)
		{
			Assert.Throws(data.ExpectedException, () => data.Params.Instance.CheckAppointment(data.Params.Meeting2check));
		}

		public class ExpectedValueTestData
		{
			public string Name;
			public Parameters Params;
			public Boolean ExpectedValue;

			public override string ToString()
			{
				return $"{Name}";
			}
		}

		public class TestThrowingExceptionData
		{
			public string Name;
			public Parameters Params;
			public Type ExpectedException;

			public override string ToString()
			{
				return $"{Name}";
			}
		}

		public class Parameters {
			public MeetingCalculator.AppointmentChecker Instance;
			public MeetingCalculator.MeetingAppointment Meeting2check;
		}
	}
}

/*
WARNING: Modification of this comment will make it impossible to merge user-defined changes

BEGIN_CODEGEN_DATA
H4sIAAAAAAAAAO1Z62/bNhD/LAP+Hw7BPliFH7GcPpy0wTLHbdPVcbFowx7YB0Y6L0RlUSUpt17g/72kXpEiOXUWL8N
sA7ZB6o73FH/k+TpP6rUncDqG87ENo/Hp2evfwH57dgGD8Wg0PLc19Q36yIlEFy7n4OJsqsb6uY1CwpS56B2C+3xyYF
m9SWviPHNbB6R32epj12k97TtPXbSekUmfqDWdeq1e88kURUAchBGipP5fA+I5oUck41qkqNeu6zUjFIoCF3MhcXp0a
94eMM9DR1Lmi3ZkHnVueH4NfSqPtCYjCC896oDjESFgcIXOx5MgYNSXU/SlVjYgQvliaIVGwOlMuQZCEqkWlYxr59ZG
spDDaK7o6LuEvyaO5GzeMLWoSJ7R6YA9VrGl08BDvQomionxeUSVV5x9Bh8/wzmTZykLusMvDgbatYapfTIWkSeZdbE
vH5igks4wChgcgn2FSu4pkeTl8EugQoPuL8QLI7p+enxjVRKTgoSGCTHROHHdhrapUkrCY5yrDMIr+H4v6EILOp331P
9os3eUEzXx1AQkg5O/Q46nOGOB+Ak/hZRH/om9ZiLkA+FkKpQYrS6aoEQuUh3Gma8S4TuYcKySjsjy91TIl2Xu5Elu0
TFcVwsus0aCVQTQplNsWPvWfhP6Tei+aIL6qMm+2YTlPP2EJ2F6oMb+Chq7+2tVmYm7U2d3vToTcc2M/iP13fbPvlBv
Jp1QdO+2xlqvNb1VInCwVp3WKlG3sqgvzHRrGYkay9H7YukGul8AVDx7345AGiYzMWWR2lQAFGWS5CHGpEWMc/fGHms
HJTso2Xwo2bZt3dtt69223vxtvYE3hJUC0Evx5ptQMiGeeBiWdP8JlFSUdP+nqJUBeLG0ioxqP1vXocrcrO4slpOap8
RSXVJWiyvXlktFlhLo6/qSJrk5VKMZ8aib5ud35EzHahsPjBePfmCs94janRcbeQ28ARGFRPMA2aSRPTKXYPk94MBSc
FDwPsOE/P96WwoJuzvktmHCFt8h/1MY6q0CQ0PfvZCEyx0U7aBo86Ho34eFR76e5KumP+J66M9oPNClk8aFRiKh0Ekz
zYgrqYhmjLqVfcdGZQELrvrJNRBnhIOqQUPiKXs1rR1jSDuFivZt2Y08VyERiVsnQiCX7eEnJTRmLljSTPQVWo93u19
d9a0Yh3K1uBSGbwcn8STiFUVXsnVNUNXnq+MHx67Yic03lSvzWKqMheS6M61PkKNCEzY7BeKhKFB/YMxD4hd1xI3tjI
fNkHPqYqrCZhfRIO5DJ1YYHGXIffhu71qbsNir+GMg79TSHKzJMVu9OVBK1mN4lrOr4MdKzf70zTm6e2UZ2YqXhfRd0
l/1+QrCt1pGgyEAAA==
END_CODEGEN_DATA
*/
